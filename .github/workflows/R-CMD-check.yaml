on: [push, pull_request]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: macOS-latest, r: 'release' }
        - { os: macOS-latest, r: 'devel', args: "--no-manual" }
        - { os: ubuntu-18.04, r: '3.3', args: "--no-manual" }
        - { os: ubuntu-18.04, r: '3.4', args: "--no-manual" }
        - { os: ubuntu-18.04, r: '3.5', args: "--no-manual" }
        - { os: ubuntu-18.04, r: 'release', args: "--no-manual" }
        - { os: windows-latest, r: 'release', args: "--no-manual" }

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      DBROOTPASS: r2N5y7V*
      PGPASSWORD: r2N5y7V*
      MYSQL_PWD: r2N5y7V*
      # disable tests on linux
      DBTEST_DISABLE_PG: ${{ contains(matrix.config.os, 'ubuntu') }}
      DBTEST_DISABLE_MARIA: ${{ contains(matrix.config.os, 'ubuntu') || contains(matrix.config.os, 'windows') }}

    steps:
      - uses: actions/checkout@v1

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - uses: r-lib/actions/setup-tinytex@master
        if: contains(matrix.config.args, 'no-manual') == false

      - name: ensure tinytex is installed correctly
        run: |
          kpsewhich pdftexcmds.sty || echo "pdftexcmds.sty wasn't found, installing"
          tlmgr install pdftexcmds
        if: contains(matrix.config.args, 'no-manual') == false

      - name: ensure windows has gzip
        run: |
          Write-Host $Env:path
          choco install gzip
        if: contains(runner.os, 'windows')

      - name: Cache R packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{ hashFiles('DESCRIPTION') }}

      - name: Cache windows Chocolatey downloads
        uses: actions/cache@v1
        if: contains(runner.os, 'windows')
        with:
          path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{ hashFiles('DESCRIPTION') }}


      - name: Setup databases macOS
        run: |
           bash db-setup/postgres-brew.sh
           psql -Upostgres -f db-setup/postgres-reset.sql
           bash db-setup/mariadb-brew.sh
           mysql -u root < db-setup/mariadb-reset.sql
        if: contains(runner.os, 'macOS')

      - name: Install Ubuntu dependencies
        run: |
          sudo apt install unixodbc unixodbc-dev --install-suggests
          sudo apt install libcurl4-openssl-dev libmariadb-client-lgpl-dev postgresql-client libpq-dev odbc-postgresql
        if: contains(runner.os, 'linux')

      - name: Setup databases linux and odbc manual adjustments
        run: |
          bash db-setup/postgres-docker.sh
          sudo service mysql stop
          bash db-setup/mariadb-docker.sh
          # the driver as installed in odbcinst.ini isn't located
          sudo sed -i 's/Driver=psqlodbcw.so/Driver=\/usr\/lib\/x86_64-linux-gnu\/odbc\/psqlodbcw.so/g' /etc/odbcinst.ini
          sudo sed -i 's/Driver=psqlodbca.so/Driver=\/usr\/lib\/x86_64-linux-gnu\/odbc\/psqlodbca.so/g' /etc/odbcinst.ini
        if: contains(runner.os, 'linux')

      - name: Setup databases windows
        run: |
          choco install postgresql --params '/Password:${{ env.PGPASSWORD }}' --paramsglobal
          choco install psqlodbc
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine")
          psql -Upostgres -f db-setup/postgres-reset.sql
        if: contains(runner.os, 'windows')

      - name: Install dependencies
        run: |
          Rscript -e "install.packages(c('remotes', 'rcmdcheck', 'httptest'), type = 'source')" -e "remotes::install_deps(dependencies = TRUE)"
          Rscript -e "install.packages(c('RMariaDB', 'odbc', 'RPostgreSQL', 'RPostgres'), type = 'source');"

      - name: Check
        run: Rscript -e "rcmdcheck::rcmdcheck(args = '${{ matrix.config.args }}', error_on = 'note', check_dir = 'check')"

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Test coverage
        if: contains(runner.os, 'macOS') && contains(matrix.config.r, 'release')
        run: |
          Rscript -e 'remotes::install_github("r-lib/covr@gh-actions")'
          Rscript -e 'covr::codecov(token = "${{secrets.CODECOV_TOKEN}}")'

      - name: Remove rtools for windows
        run: |
          # Get it
          $path = [System.Environment]::GetEnvironmentVariable("Path","User")
          Write-Host "Before"
          Write-Host $path
          # Remove unwanted elements
          $path = ($path.Split(';') | Where-Object { $_ -ne 'C:\Rtools\mingw_64\bin' }) -join ';'
          $path = ($path.Split(';') | Where-Object { $_ -ne 'C:\Rtools\bin' }) -join ';'
          Write-Host "After"
          Write-Host $path
          # Set it
          System.[Environment]::SetEnvironmentVariable('PATH', $path, 'User')
          Write-Host $Env:path
        if: contains(runner.os, 'windows')
