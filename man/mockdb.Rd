% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mock-db.R
\name{mockdb}
\alias{mockdb}
\alias{with_mock_db}
\alias{start_mock_db}
\alias{stop_mock_db}
\title{Run DBI queries against a mocked database}
\usage{
with_mock_db(expr)

start_mock_db()

stop_mock_db()
}
\arguments{
\item{expr}{the expression to execute}
}
\value{
nothing
}
\description{
Start and stop using a mocked database with \code{start_mock_db()} and
\code{stop_mock_db()} respectively. Alternatively, you can wrap a chunk of code in
\code{with_mock_db()} to execute the whole thing without needing to remember to
stop the mocking.
}
\details{
You only need to use one approach: either use \code{start_mock_db()} to start
using mocks and then \code{stop_mock_db()} to stop or use \code{with_mock_db()} wrapped
around the code you want to execute against the mocked database. You don't
need to (and should not) use both at the same time.

Connections should be made after \code{start_mock_db()} if you're using that
function or they should be made inside of \code{with_mock_db()} if you're using
that function because \code{dittodb} uses the database name (given in \code{dbname} or
\code{Database} argument of \code{\link{dbConnect}} depending on the driver) to separate
different fixtures.
}
\examples{
\dontrun{
start_mock_db()

con <- dbConnect(
  RPostgreSQL::PostgreSQL(),
  dbname = "nycflights",
  host = "127.0.0.1",
  user = "travis",
  password = ""
)

test_that("We get one airline", {
  one_airline <- dbGetQuery(
    con,
    "SELECT carrier, name FROM airlines LIMIT 1"
  )
  expect_is(one_airline, "data.frame")
  expect_equal(nrow(one_airline), 1)
  expect_equal(one_airline$carrier, "9E")
  expect_equal(one_airline$name, "Endeavor Air Inc.")
})

stop_mock_db()

# or use `with_mock_db()`
with_mock_db({
  con <- dbConnect(
    RPostgreSQL::PostgreSQL(),
    dbname = "nycflights",
    host = "127.0.0.1",
    user = "travis",
    password = ""
  )

  test_that("We get one airline", {
    one_airline <- dbGetQuery(
      con,
      "SELECT carrier, name FROM airlines LIMIT 1"
    )
    expect_is(one_airline, "data.frame")
    expect_equal(nrow(one_airline), 1)
    expect_equal(one_airline$carrier, "9E")
    expect_equal(one_airline$name, "Endeavor Air Inc.")
  })
})
}
}
